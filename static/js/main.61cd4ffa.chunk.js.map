{"version":3,"sources":["components/Startscreen.js","components/TermContainer.js","components/NextTask.js","components/EndScreen.js","components/App.js","index.js"],"names":["Startscreen","props","className","onClick","startGame","TermContainer","termLetters","this","alt","split","indexesToHide","letterIndex","map","letter","index","indexOf","key","score","stars","i","push","aria-hidden","gameStart","undefined","src","sources","makeLetterContainer","generateStars","React","Component","NextTask","handleNext","EndScreen","handleEnd","termsLength","terms","wrongLetters","App","setState","gameStarted","gameEnded","step","shuffleArray","handleTerm","state","taskCompleted","currentTerm","hiddenLetters","bind","handleKeyDown","handleNextButtonClick","window","addEventListener","array","currentIndex","length","randomIndex","Math","floor","random","tempVal","console","log","hasStarted","onkeydown","document","body","style","backgroundImage","e","hiddenLetterIndex","pressedKey","String","fromCharCode","which","toLowerCase","splice","currTerm","numOfIndexesToHide","randomIndexes","slicedLetters","randomNum","slice","join","id","href","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.61cd4ffa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Startscreen = (props) => {\r\n    return (\r\n        <div className={props.className}>\r\n            <div className='startButton' onClick={props.startGame}>\r\n                <span>Start</span>\r\n            </div>\r\n            <div className='instructions'>\r\n                <p>Instructions :</p>\r\n                    <p>\r\n                        In this excercise you will have to type in \r\n                        the missing letters to complete the word from the picture.\r\n                        If you miss a letter your score doesn't increase :(\r\n                    </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport class TermContainer extends React.Component {\r\n\r\n    makeLetterContainer () {\r\n        const termLetters = this.props.alt.split('');\r\n        let indexesToHide = this.props.letterIndex;\r\n        const container = termLetters.map(\r\n            (letter,index) => {\r\n                return (\r\n                    <span className={indexesToHide.indexOf(index) > -1 ? 'hideLetter' : 'showLetter'}\r\n                        key={index}>\r\n                        {letter}\r\n                    </span>\r\n                )\r\n            });\r\n        return container;\r\n    }\r\n\r\n    generateStars () {\r\n        let score = this.props.score;\r\n        let stars = [];\r\n        for (let i=0; i < score; i++) {\r\n            stars.push(<i className=\"fa fa-star\" aria-hidden=\"true\"></i>) \r\n        }\r\n        return stars;\r\n    }\r\n\r\n    render () {\r\n        if (this.props.gameStart && this.props.alt !== undefined) {\r\n        return(\r\n            <div className='gameContainer'>\r\n                <img alt={this.props.alt} src={this.props.sources}/>\r\n                <div className='letterContainer'>\r\n                   {\r\n                       this.makeLetterContainer()\r\n                    }\r\n                </div>\r\n                <p>Type in a letter!</p>\r\n                <div>\r\n                    {this.generateStars()}\r\n                </div>\r\n            </div>\r\n        )} else {\r\n            return null\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nexport const NextTask = (props) => {\r\n    return(\r\n        <div className=\"nextTaskOuter\">\r\n            <div className='nextTaskContainer'>\r\n                <h1>Excellent!</h1>\r\n                <h2>So far you've got {props.score}\r\n                <i className=\"fa fa-star\" aria-hidden=\"true\"></i>\r\n                 </h2>\r\n                <button className='nextButton' onClick={props.handleNext}>\r\n                    Next\r\n                </button>\r\n            </div> \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const EndScreen = (props) => {\r\n    return (\r\n        <div className='endScreen'>\r\n            <div className='endButton' onClick={props.handleEnd}>\r\n                <span>Try again</span>\r\n            </div>\r\n            <p>Game over</p>\r\n            <p className='score'>\r\n                Your score : {`${props.score}/${props.termsLength}`}\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Startscreen} from './Startscreen';\r\nimport {TermContainer} from './TermContainer';\r\nimport { NextTask } from './NextTask';\r\nimport {EndScreen} from './EndScreen';\r\n\r\nconst terms = [\r\n    'lion',\r\n    'desert',\r\n    'dandelion',\r\n    'shuttle',\r\n    'globe', \r\n    'snowflake',\r\n    'earth',\r\n    'deer',\r\n    'rooster',\r\n    'frog'\r\n];\r\n\r\nlet wrongLetters = 0;\r\n\r\nexport class App extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gameStarted: false,\r\n            taskCompleted: false,\r\n            gameEnded: false,\r\n            currentTerm: [],\r\n            hiddenLetters:[],\r\n            step: 0,\r\n            score: 0\r\n        }\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.shuffleArray = this.shuffleArray.bind(this);\r\n        this.handleNextButtonClick = this.handleNextButtonClick.bind(this);\r\n        this.handleTerm = this.handleTerm.bind(this);\r\n    }\r\n\r\n    componentDidMount () {\r\n        window.addEventListener('onkeydown', this.handleKeyDown);\r\n        this.shuffleArray(terms);\r\n    }\r\n\r\n    shuffleArray (array) {\r\n        let currentIndex = array.length;\r\n        while (currentIndex > 0) {\r\n            let randomIndex = Math.floor(Math.random()*currentIndex);\r\n            currentIndex--;\r\n            let tempVal = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = tempVal;\r\n        }\r\n        console.log(array)\r\n        return array\r\n    }\r\n\r\n    onClick () {\r\n        const hasStarted = !this.state.gameStarted;\r\n        window.onkeydown = this.handleKeyDown;\r\n        this.setState({\r\n            gameStarted: hasStarted\r\n        })\r\n        this.handleTerm();\r\n        document.body.style.backgroundImage = `linear-gradient(45deg, #93a5cf 0%, #e4efe9 100%)`;\r\n    }\r\n\r\n    handleKeyDown (e) {\r\n\r\n        let hiddenLetters = this.state.hiddenLetters;\r\n        let hiddenLetterIndex = this.state.indexesToHide;\r\n        let pressedKey = String.fromCharCode(e.which).toLowerCase();\r\n        console.log(pressedKey);\r\n\r\n        if (hiddenLetters.indexOf(pressedKey) > -1) {\r\n            hiddenLetterIndex.splice(hiddenLetters.indexOf(pressedKey), 1);\r\n            hiddenLetters.splice(hiddenLetters.indexOf(pressedKey), 1);\r\n            this.setState({\r\n                indexesToHide: hiddenLetterIndex,\r\n                hiddenLetters: hiddenLetters\r\n            })\r\n        } else {\r\n            console.log('not a match')\r\n            wrongLetters++\r\n        }\r\n\r\n        if (hiddenLetters.length === 0) {\r\n            this.setState({\r\n                taskCompleted: true,\r\n            })           \r\n        }\r\n\r\n        if (hiddenLetters.length === 0 && wrongLetters === 0) {\r\n            this.setState({\r\n                score: this.state.score + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    handleTerm () {\r\n        if (terms[this.state.step] === undefined) {\r\n            this.setState ({\r\n                gameEnded: true,\r\n                gameStarted: false\r\n            })\r\n            return\r\n        }\r\n\r\n        let currTerm = terms[this.state.step].split('');\r\n        let numOfIndexesToHide = currTerm.length - 1;\r\n        let randomIndexes = [];\r\n        let slicedLetters = [];\r\n\r\n        while(randomIndexes.length < numOfIndexesToHide) {\r\n            let randomNum = Math.floor(Math.random()*currTerm.length)\r\n            if (randomIndexes.indexOf(randomNum) === -1) {\r\n                randomIndexes.push(randomNum);\r\n                slicedLetters.push(currTerm.slice(randomNum, randomNum+1).join())\r\n            }\r\n        }\r\n        \r\n        this.setState({\r\n            currentTerm: terms[this.state.step],\r\n            hiddenLetters: slicedLetters,\r\n            indexesToHide: randomIndexes, \r\n        })\r\n    }\r\n\r\n    handleNextButtonClick () {\r\n        this.setState({\r\n            taskCompleted:false,\r\n            step: this.state.step + 1,\r\n        }, () => this.handleTerm())\r\n        wrongLetters = 0;\r\n    }\r\n\r\n    handleEnd = () => {\r\n        this.setState({\r\n            gameStarted: true,\r\n            gameEnded: false,\r\n            step: 0,\r\n            score: 0\r\n        }, () => {\r\n            this.shuffleArray(terms);\r\n            this.handleTerm();\r\n        })\r\n        \r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className='appContainer'>\r\n               {\r\n                    !this.state.gameStarted && !this.state.gameEnded ?\r\n                        <Startscreen\r\n                            startGame={this.onClick}\r\n                            className='startApp' /> : null\r\n                }\r\n                {\r\n                    this.state.gameStarted && !this.state.gameEnded ? \r\n                        <TermContainer\r\n                            letterIndex={this.state.indexesToHide}\r\n                            gameStart={this.state.gameStarted}\r\n                            sources={`./images/${terms[this.state.step]}.jpg`}\r\n                            alt={terms[this.state.step]}\r\n                            score={this.state.score} /> : null\r\n                }\r\n                {\r\n                    this.state.taskCompleted && !this.state.gameEnded ? \r\n                        <NextTask \r\n                            className='nextTaskDisplay'\r\n                            handleNext= {this.handleNextButtonClick}\r\n                            score={this.state.score} /> : null\r\n                }\r\n                {\r\n                    this.state.gameEnded ?\r\n                        <EndScreen\r\n                            className='endScreen'\r\n                            handleEnd={this.handleEnd}\r\n                            score={this.state.score}\r\n                            termsLength={terms.length} /> : null\r\n                }\r\n                <footer>\r\n                    Built with <span id=\"heart\"> ❤ </span> \r\n                    By: <a id=\"Max1mmus\" href=\"https://github.com/Max1mmus\">Max1mmus</a>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}